{"version":3,"sources":["3-27地图/utils/rendermap.js","3-27地图/api/getdata.js","3-27地图/page/TableList.jsx","3-27地图/page/Map.jsx","3-27地图/page/navTab.jsx","index.js","3-27地图/index.jsx"],"names":["renderMap","province","mapList","name","value","option","tooltip","show","formatter","e","t","n","visualMap","min","max","left","bottom","showLabel","text","pieces","gt","label","color","gte","lte","lt","geo","map","roam","scaleLimit","zoom","top","normal","fontSize","itemStyle","borderColor","emphasis","areaColor","shadowOffsetX","shadowOffsetY","borderWidth","series","type","geoIndex","data","axios","interceptors","response","use","res","err","Promise","reject","columns","title","dataIndex","key","TableList","props","pagination","dataSource","rowKey","record","expandable","expandedRowRender","item","cities","cityName","confirmedCount","smallClolumns","JSON","parse","stringify","console","log","getProvinceData","provincename","list","MapList","provenList","filter","provinceShortName","Map","localStorage","setItem","getItem","setLocal","getLocal","useState","setMapList","setProvice","useEffect","a","get","result","List","newslist","fetchDate","events","click","params","echars","lazyUpdate","onEvents","TabPane","Tabs","tabs","NacTab","defaultActiveKey","index","tab","render","window","root"],"mappings":"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","file":"static/js/main.78fd35da.chunk.js","sourcesContent":["// 返回的option\r\nconst renderMap = (\r\n  province = \"china\",\r\n  mapList = [{ name: \"安徽\", value: 1000 }]\r\n) => {\r\n  const option = {\r\n    tooltip: {\r\n      // 提示框\r\n      show: true,\r\n      // triggerOn: \"click\",\r\n      // formatter: \"省份：{b} <br/> 累计确诊：{c}\"  // a 系列名称 b name c value 写法一\r\n      formatter: function(e, t, n) {\r\n        // console.log(e);\r\n        // console.log(e.name);\r\n        // console.log(e.value);\r\n        return `${province == \"china\" ? \"省份\" : \"地区\"}: ${\r\n          e.name\r\n        }<br/> 累计确诊：${e.value || 0}`;\r\n      }\r\n    },\r\n    visualMap: {\r\n      min: 0,\r\n      max: 1000,\r\n      left: 26,\r\n      bottom: 40,\r\n      showLabel: !0,\r\n      text: [\"高\", \"低\"],\r\n      pieces: [\r\n        {\r\n          gt: 1000,\r\n          label: \"> 1000 人\",\r\n          color: \"#7f1100\"\r\n        },\r\n        {\r\n          gte: 100,\r\n          lte: 1000,\r\n          label: \"> 100 人\",\r\n          color: \"red\"\r\n        },\r\n        {\r\n          gte: 10,\r\n          lte: 100,\r\n          label: \"10 - 100 人\",\r\n          color: \"#ff5428\"\r\n        },\r\n        {\r\n          gte: 1,\r\n          lt: 10,\r\n          label: \"1 - 9 人\",\r\n          color: \"#ff8c71\"\r\n        },\r\n        {\r\n          gt: 0,\r\n          lt: 1,\r\n          label: \"疑似\",\r\n          color: \"#ffd768\"\r\n        },\r\n        {\r\n          value: 0,\r\n          color: \"#ffffff\"\r\n        }\r\n      ],\r\n      show: !0\r\n    },\r\n    geo: {\r\n      map: province, // 图表显示的类型 显示省的时候需要用中文\r\n      roam: !1,\r\n      scaleLimit: {\r\n        min: 1,\r\n        max: 2\r\n      },\r\n      zoom: 1.23,\r\n      top: 120,\r\n      label: {\r\n        normal: {\r\n          show: !0,\r\n          fontSize: \"14\",\r\n          color: \"rgba(0,0,0,0.7)\"\r\n        }\r\n      },\r\n      itemStyle: {\r\n        normal: {\r\n          //shadowBlur: 50,\r\n          //shadowColor: 'rgba(0, 0, 0, 0.2)',\r\n          borderColor: \"rgba(0, 0, 0, 0.2)\"\r\n        },\r\n        emphasis: {\r\n          areaColor: \"#f2d5ad\",\r\n          shadowOffsetX: 0,\r\n          shadowOffsetY: 0,\r\n          borderWidth: 0\r\n        }\r\n      }\r\n    },\r\n    series: [\r\n      {\r\n        left: \"center\",\r\n        name: \"确诊病例\",\r\n        type: \"map\", // 图表类型 (地图、饼图等)\r\n        geoIndex: 0,\r\n        data: mapList // 我们要显示的数据  是一个数组\r\n      }\r\n    ]\r\n  };\r\n\r\n  return option;\r\n};\r\nexport default renderMap;\r\n","// 获取数据\r\nimport axios from \"axios\";\r\n// 设置一个响应拦截器\r\naxios.interceptors.response.use(\r\n  res => res.data,\r\n  err => Promise.reject(err)\r\n);\r\nconst KEY = \"64000257e473c650789293ce3b4c15df\";\r\n// 疫情数据\r\nconst getData = () => {\r\n  return axios.get(`http://api.tianapi.com/txapi/ncovcity/index?key=${KEY}`);\r\n};\r\nexport { getData };\r\n","import React from \"react\";\r\nimport { Table } from \"antd\";\r\n// pagination是否显示分页按钮 dataSource 数据源  rowKey 数据怎么来显示  expandedRowRender 表格展开显示 是一个函数 能拿到数据的每一项\r\n// 表格展开显示的数据\r\nfunction expandedRowRender(item) {\r\n  // console.log(item.cities); // 展开的数据\r\n  // 如果没有数据就结束\r\n  if (!item.cities) return;\r\n  let data = item.cities.map(item => {\r\n    // console.log(item);\r\n\r\n    return {\r\n      name: `${item.cityName}市`,\r\n      value: item.confirmedCount,\r\n      ...item\r\n    };\r\n  });\r\n  // console.log(data);\r\n  // columns\r\n\r\n  let newArr = JSON.parse(JSON.stringify(columns));\r\n  let smallClolumns = newArr.map(item => {\r\n    delete item.title;\r\n    return item;\r\n  });\r\n  console.log(smallClolumns);\r\n  return (\r\n    <Table\r\n      columns={smallClolumns}\r\n      pagination={false} // 是否分页\r\n      dataSource={data} // 数据\r\n      rowKey={record => {\r\n        //指定key\r\n        // console.log(record.name);\r\n        return record.name;\r\n      }}\r\n    ></Table>\r\n  );\r\n}\r\n//表头数据\r\nconst columns = [\r\n  { title: \"地区\", dataIndex: \"name\", key: \"name\" },\r\n  { title: \"确诊\", dataIndex: \"confirmedCount\", key: \"confirmedCount\" },\r\n  { title: \"死亡\", dataIndex: \"deadCount\", key: \"deadCount\" },\r\n  { title: \"治愈\", dataIndex: \"curedCount\", key: \"curedCount\" }\r\n];\r\nfunction TableList(props) {\r\n  return (\r\n    <Table\r\n      columns={columns}\r\n      pagination={false} // 是否分页\r\n      dataSource={props.data} // 数据\r\n      rowKey={record => {\r\n        //指定key\r\n        // console.log(record.name);\r\n        return record.name;\r\n      }}\r\n      expandable={{\r\n        expandedRowRender: item => expandedRowRender(item) // 展开的数据\r\n      }}\r\n    ></Table>\r\n  );\r\n}\r\n\r\nexport default TableList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ReactECharts from \"echarts-for-react\";\r\n// 地图显示的json文件\r\nimport \"echarts/map/js/china\";\r\nimport \"echarts/map/js/province/anhui\";\r\nimport \"echarts/map/js/province/henan\";\r\nimport \"echarts/map/js/province/xizang\";\r\nimport \"echarts/map/js/province/xinjiang\";\r\nimport echars from \"echarts/lib/echarts\";\r\nimport renderMap from \"../utils/rendermap\"; // 获取option参数函数\r\nimport { getData } from \"../api/getdata\"; // 获取数据\r\nimport TabList from \"../page/TableList\";\r\n\r\n// 处理成需要的数据\r\nfunction setChinaData(list) {\r\n  // 使用map转换需要的数据结构 provinceShortName => name confirmedCount=> value\r\n  let mapList = list.map(item => ({\r\n    name: item.provinceShortName,\r\n    value: item.confirmedCount,\r\n    ...item\r\n  }));\r\n  return mapList;\r\n}\r\n\r\n// 获取单个省/直辖市的数据\r\n/**\r\n * @param {*} provincename 省的名称\r\n * @param {*} list  需要过滤的数据\r\n */\r\nfunction getProvinceData(provincename, list) {\r\n  console.log(provincename, list);\r\n  let MapList = [];\r\n\r\n  const provenList = list.filter(\r\n    item => item.provinceShortName === provincename\r\n  );\r\n  console.log(provenList[0].cities);\r\n  MapList = provenList[0].cities.map(item => {\r\n    // console.log(item);\r\n    return {\r\n      name: `${item.cityName}市`,\r\n      value: item.confirmedCount,\r\n      ...item\r\n    };\r\n  });\r\n  console.log(MapList);\r\n  // [{'provinceShortName:\"安徽\"'}]\r\n  return MapList;\r\n}\r\n\r\n// 自定义本地存储的hooks\r\nfunction useLocal() {\r\n  // 设置本地存储\r\n  const setLocal = (key, data) => {\r\n    localStorage.setItem(key, JSON.stringify(data));\r\n  };\r\n\r\n  // 获取本地存储\r\n  const getLocal = key => {\r\n    return JSON.parse(localStorage.getItem(key));\r\n  };\r\n  return [setLocal, getLocal];\r\n}\r\n\r\n// 地图组件\r\nfunction Map() {\r\n  let [setLocal, getLocal] = useLocal();\r\n  // mapList 需要显示的数据\r\n  let [mapList, setMapList] = useState([]);\r\n  // province 地图怎么显示\r\n  let [province, setProvice] = useState(\"china\");\r\n  useEffect(() => {\r\n    let fetchDate = async () => {\r\n      // 如果本地存储有值 直接在本地存储里面取值 没有的话请求数据\r\n      let result;\r\n      // getLocal(\"virusdata\");\r\n      if (!getLocal(\"virusdata\")) {\r\n        result = await getData();\r\n        // 把结果存到本地存储里面\r\n        setLocal(\"virusdata\", result);\r\n      } else {\r\n        result = getLocal(\"virusdata\");\r\n      }\r\n      // 如果是省区地图时获取省区城市信息\r\n      // 数据需要改变\r\n      if (province !== \"china\") {\r\n        console.log(province);\r\n        let List = getProvinceData(province, result.newslist);\r\n        setMapList(List);\r\n      } else {\r\n        // 中国地图\r\n        // 转换过后的数据\r\n        let List = setChinaData(result.newslist);\r\n        setMapList(List);\r\n      }\r\n    };\r\n\r\n    fetchDate();\r\n  }, [province]);\r\n\r\n  // 点击进入省或者直辖市地图\r\n  let events = {\r\n    // 点击获取省市名称\r\n    click: params => {\r\n      console.log(params);\r\n      setProvice(params.name); // 点击进入省\r\n    }\r\n  };\r\n  console.log(mapList);\r\n  return (\r\n    <div>\r\n      这是地图组件\r\n      <ReactECharts\r\n        option={renderMap(province, mapList)}\r\n        echars={echars}\r\n        lazyUpdate={true} // 懒加载 做缓存\r\n        onEvents={events}\r\n      />\r\n      <TabList data={mapList} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport { Tabs } from \"antd\";\r\nconst { TabPane } = Tabs;\r\n// 定义tabs里面显示的信息 是个数组\r\nconst tabs = [\r\n  { title: \"疫情地图\" },\r\n  { title: \"最新消息\" },\r\n  { title: \"辟谣信息\" },\r\n  { title: \"疫情趋势\" }\r\n];\r\n// tab  导航标题 TabPane 里面放需要显示的内容\r\nfunction NacTab() {\r\n  return (\r\n    <>\r\n      <Tabs defaultActiveKey=\"1\">\r\n        {tabs.map((item, index) => (\r\n          <TabPane tab={`${item.title}`} key={index}>\r\n            {item.title}\r\n          </TabPane>\r\n        ))}\r\n      </Tabs>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NacTab;\r\n","import React, { useEffect, useState } from \"react\";\r\n// useEffect:数据获取、订阅、定时执行任务手动修改ReactDOM这些副作用\r\n// 依赖项: 1.空数组，则只会执行一次\r\n// 2.非空数组，useEffect只有数据改变才执行\r\n// 3.不填array这个数组，useEffect每次都会执行\r\n// rfce 自动生成函数组件默认导出快捷键\r\nimport { render } from \"react-dom\";\r\nimport App from \"./3-27地图/index\";\r\n\r\nrender(<App />, window.root);\r\n","import React from \"react\";\r\nimport Map from \"./page/Map\"; //地图组件\r\nimport NavTab from \"./page/navTab\";\r\nimport \"antd/dist/antd.css\";\r\nexport default props => {\r\n  return (\r\n    <>\r\n      {/* 标签页 */}\r\n      <NavTab />\r\n      {/*  */}\r\n      {/* 地图组件 */}\r\n      <Map />\r\n    </>\r\n  );\r\n};\r\n"],"sourceRoot":""}